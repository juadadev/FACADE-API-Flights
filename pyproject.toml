[project]
name = "facade-api-flights"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = ["fastapi>=0.115.12", "ruff>=0.11.8", "uvicorn>=0.34.2"]


[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
  "E",   # Pycodestyle (PEP 8 básico: indentación, espacios, etc.)
  "F",   # Pyflakes (errores lógicos como variables no usadas)
  "B",   # Bugbear (errores comunes y antipatrones)
  "C",   # Complejidad (reglas como McCabe)
  "I",   # isort (orden de imports)
  "UP",  # Pyupgrade (moderniza sintaxis, ej: dict() → {})
  "PL",  # Pylint (reglas extendidas como naming)
  "RUF", # Reglas propias de Ruff (ej: unused noqa)
  # "D",   # pydocstyle (docstrings)
]

ignore = [
  "E501",    # Ignora largo de línea (el formateador lo maneja)
  "D105",    # Docstrings en funciones privadas (opcional)
  "PLR2004", # Magic values (a veces necesario)
  "RUF012",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# Opciones específicas
[tool.ruff.lint.pydocstyle]
convention = "google" # Docstrings estilo Google (o "numpy", "pep257")

[tool.ruff.lint.isort]
known-first-party = ["mi_proyecto"] # Imports locales
lines-between-types = 1             # Línea en blanco entre grupos
combine-as-imports = true           # Combina `import X as Y`
